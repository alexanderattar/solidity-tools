/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface GasInterface extends utils.Interface {
  functions: {
    "mappingStorage(uint256)": FunctionFragment;
    "readData(uint256)": FunctionFragment;
    "writeData(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "mappingStorage" | "readData" | "writeData"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "mappingStorage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "readData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "writeData",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "mappingStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "readData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "writeData", data: BytesLike): Result;

  events: {
    "GasEvent(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GasEvent"): EventFragment;
}

export interface GasEventEventObject {
  data: BigNumber;
}
export type GasEventEvent = TypedEvent<[BigNumber], GasEventEventObject>;

export type GasEventEventFilter = TypedEventFilter<GasEventEvent>;

export interface Gas extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GasInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    mappingStorage(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    readData(
      _times: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    writeData(
      _times: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  mappingStorage(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  readData(
    _times: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  writeData(
    _times: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    mappingStorage(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readData(_times: BigNumberish, overrides?: CallOverrides): Promise<void>;

    writeData(_times: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "GasEvent(uint256)"(data?: null): GasEventEventFilter;
    GasEvent(data?: null): GasEventEventFilter;
  };

  estimateGas: {
    mappingStorage(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readData(
      _times: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    writeData(
      _times: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    mappingStorage(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readData(
      _times: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    writeData(
      _times: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
