/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Gas, GasInterface } from "../Gas";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "data",
        type: "uint256",
      },
    ],
    name: "GasEvent",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "mappingStorage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_times",
        type: "uint256",
      },
    ],
    name: "readData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_times",
        type: "uint256",
      },
    ],
    name: "writeData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101c0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806337ebbc0314610046578063742a3bea1461005b5780638f889f8e1461008d575b600080fd5b61005961005436600461013a565b6100a0565b005b61007b61006936600461013a565b60006020819052908152604090205481565b60405190815260200160405180910390f35b61005961009b36600461013a565b610107565b6000805b828110156100cf576000818152602081905260409020549150806100c781610153565b9150506100a4565b506040518281527f43127e72c8ace8a37f66c1f746005435ade403332b44f3e647dae6e06cc2d9b39060200160405180910390a15050565b60005b81811015610136576000818152602081905260409020600190558061012e81610153565b91505061010a565b5050565b60006020828403121561014c57600080fd5b5035919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156101ac577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea164736f6c634300080a000a";

type GasConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GasConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Gas__factory extends ContractFactory {
  constructor(...args: GasConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Gas> {
    return super.deploy(overrides || {}) as Promise<Gas>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Gas {
    return super.attach(address) as Gas;
  }
  override connect(signer: Signer): Gas__factory {
    return super.connect(signer) as Gas__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GasInterface {
    return new utils.Interface(_abi) as GasInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Gas {
    return new Contract(address, _abi, signerOrProvider) as Gas;
  }
}
