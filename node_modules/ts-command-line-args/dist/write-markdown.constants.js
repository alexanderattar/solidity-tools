"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.usageGuideInfo = exports.parseOptions = exports.argumentConfig = exports.footerReplaceBelowMarker = exports.configImportNameDefault = exports.replaceAboveDefault = exports.replaceBelowDefault = void 0;
exports.replaceBelowDefault = "[//]: ####ts-command-line-args_write-markdown_replaceBelow";
exports.replaceAboveDefault = "[//]: ####ts-command-line-args_write-markdown_replaceAbove";
exports.configImportNameDefault = "usageGuideInfo";
exports.footerReplaceBelowMarker = "[//]: ####ts-command-line-args_generated-by-footer";
exports.argumentConfig = {
    markdownPath: {
        type: String,
        alias: 'm',
        description: 'The file to write to. Without replacement markers the whole file content will be replaced. Path can be absolute or relative.',
    },
    replaceBelow: {
        type: String,
        defaultValue: exports.replaceBelowDefault,
        description: "A marker in the file to replace text below.",
        optional: true,
    },
    replaceAbove: {
        type: String,
        defaultValue: exports.replaceAboveDefault,
        description: "A marker in the file to replace text above.",
        optional: true,
    },
    jsFile: {
        type: String,
        alias: 'j',
        description: "jsFile to 'require' that has an export with the 'UsageGuideConfig' export. Multiple file can be specified.",
        multiple: true,
    },
    configImportName: {
        type: String,
        alias: 'c',
        defaultValue: [exports.configImportNameDefault],
        description: "Export name of the 'UsageGuideConfig' object. Defaults to '" + exports.configImportNameDefault + "'. Multiple exports can be specified.",
        multiple: true,
    },
    verify: {
        type: Boolean,
        alias: 'v',
        description: "Verify the markdown file. Does not update the file but returns a non zero exit code if the markdown file is not correct. Useful for a pre-publish script.",
    },
    configFile: {
        type: String,
        alias: 'f',
        optional: true,
        description: "Optional config file to load config from. package.json can be used if jsonPath specified as well",
    },
    jsonPath: {
        type: String,
        alias: 'p',
        optional: true,
        description: "Used in conjunction with 'configFile'. The path within the config file to load the config from. For example: 'configs.writeMarkdown'",
    },
    verifyMessage: {
        type: String,
        optional: true,
        description: "Optional message that is printed when markdown verification fails. Use '\\{fileName\\}' to refer to the file being processed.",
    },
    removeDoubleBlankLines: {
        type: Boolean,
        description: 'When replacing content removes any more than a single blank line',
    },
    skipFooter: {
        type: Boolean,
        description: "Does not add the 'Markdown Generated by...' footer to the end of the markdown",
    },
    help: { type: Boolean, alias: 'h', description: "Show this usage guide." },
};
exports.parseOptions = {
    helpArg: 'help',
    loadFromFileArg: 'configFile',
    loadFromFileJsonPathArg: 'jsonPath',
    baseCommand: "write-markdown",
    optionsHeaderLevel: 3,
    defaultSectionHeaderLevel: 3,
    optionsHeaderText: "write-markdown cli options",
    headerContentSections: [
        {
            header: 'Markdown Generation',
            headerLevel: 2,
            content: "A markdown version of the usage guide can be generated and inserted into an existing markdown document.\nMarkers in the document describe where the content should be inserted, existing content betweeen the markers is overwritten.",
        },
        {
            content: "{highlight write-markdown -m README.MD -j usageGuideConstants.js}",
        },
    ],
    footerContentSections: [
        {
            header: 'Default Replacement Markers',
            content: "replaceBelow defaults to:\n{code '" + exports.replaceBelowDefault + "'}\nreplaceAbove defaults to:\n{code '" + exports.replaceAboveDefault + "'}",
        },
        {
            header: 'String Formatting',
            content: "The only chalk modifiers supported when converting to markdown are {highlight bold} and {highlight italic}.\nFor example:\n{code \\{bold bold text\\} \\{italic italic text\\} \\{italic.bold bold italic text\\}}\nwill be converted to:\n{code **boldText** *italic text* ***bold italic text***}",
        },
        {
            header: 'Additional Modifiers',
            content: "Two additional style modifiers have been added that are supported when writing markdown. They are removed when printing to the console.\n{code \\{highlight someText\\}}\nsurrounds the text in backticks:\n`someText`\nand \n{code \\{code.typescript function(message: string)\\\\\\{console.log(message);\\\\\\}\\}}\nSurrounds the text in triple back ticks (with an optional language specifer, in this case typescript):\n```typescript\nfunction(message: string)\\{console.log(message);\\}\n```",
        },
    ],
};
exports.usageGuideInfo = {
    arguments: exports.argumentConfig,
    parseOptions: exports.parseOptions,
};
