#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var parse_1 = require("./parse");
var path_1 = require("path");
var fs_1 = require("fs");
var helpers_1 = require("./helpers");
var write_markdown_constants_1 = require("./write-markdown.constants");
var string_format_1 = __importDefault(require("string-format"));
var chalk_1 = __importDefault(require("chalk"));
function writeMarkdown() {
    var args = parse_1.parse(write_markdown_constants_1.argumentConfig, write_markdown_constants_1.parseOptions);
    var markdownPath = path_1.resolve(args.markdownPath);
    console.log("Loading existing file from '" + markdownPath + "'");
    var markdownFileContent = fs_1.readFileSync(markdownPath).toString();
    var usageGuides = helpers_1.generateUsageGuides(args);
    var modifiedFileContent = helpers_1.addContent(markdownFileContent, usageGuides, args);
    if (!args.skipFooter) {
        modifiedFileContent = helpers_1.addCommandLineArgsFooter(modifiedFileContent);
    }
    var action = args.verify === true ? "verify" : "write";
    var contentMatch = markdownFileContent === modifiedFileContent ? "match" : "nonMatch";
    var relativePath = path_1.relative(process.cwd(), markdownPath);
    switch (action + "_" + contentMatch) {
        case 'verify_match':
            console.log(chalk_1.default.green("'" + relativePath + "' content as expected. No update required."));
            break;
        case 'verify_nonMatch':
            console.warn(chalk_1.default.yellow(string_format_1.default(args.verifyMessage || "'" + relativePath + "' file out of date. Rerun write-markdown to update.", {
                fileName: relativePath,
            })));
            return process.exit(1);
        case 'write_match':
            console.log(chalk_1.default.blue("'" + relativePath + "' content not modified, not writing to file."));
            break;
        case 'write_nonMatch':
            console.log(chalk_1.default.green("Writing file to '" + relativePath + "'"));
            fs_1.writeFileSync(relativePath, modifiedFileContent);
            break;
    }
}
writeMarkdown();
